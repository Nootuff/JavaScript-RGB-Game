var numSquares = 6;

var guesses = 0;

var lgmLives = 0;

var plural;

var colors = generateRandomColors(numSquares);

var squares = document.querySelectorAll(".squares");

var middleThree = document.querySelectorAll(".middleThree ");

var bottomThree = document.querySelectorAll(".bottomThree");

var pickedColor = pickColor(); //this var's value is generated by the activated pickColor function down below, the two brackets are what make it run automatically.

var colorDisplay = document.getElementById("colorDisplay");

var messageDisplay = document.querySelector("#message");

var h1 = document.querySelector("h1");

var hamburger = document.getElementById("hamburger-menu");

var li = document.getElementsByTagName("li");

hamburger.addEventListener("click", function (){
 for (var i = 0; i < li.length; i++) {
   li[i].classList.toggle("dropdown-show");
  }
  hamburger.classList.toggle("x");
if(hamburger.classList.contains("fas") && hamburger.classList.contains("fa-bars")){
hamburger.classList.remove("fas");
hamburger.classList.remove("fa-bars");
hamburger.classList.add("fas");
hamburger.classList.add("fa-times");
} else if (hamburger.classList.contains("fas") && hamburger.classList.contains("fa-times")){
hamburger.classList.remove("fas");
hamburger.classList.remove("fa-times");
   hamburger.classList.add("fas");
hamburger.classList.add("fa-bars");
}
});

var instruct = document.querySelectorAll(".instruct");

//Tutorial overlay code
var overlay = document.querySelectorAll(".overlay");

var close = document.querySelectorAll(".close");

instruct.forEach(function(instruct) {
  instruct.addEventListener('click', function() {
    overlay[0].style.display = "block";
  });
});

close[0].addEventListener("click", function () {
  overlay[0].style.display = "none";
});

var resetButton = document.querySelector("#reset");

var easyBtn = document.querySelectorAll(".easyBtn");

var easyBtnActual = document.getElementById("easyBtnActual");

var normalBtn = document.querySelectorAll(".normalBtn");

var normalBtnActual = document.getElementById("normalBtnActual");

var hardBtn = document.querySelectorAll(".hardBtn");

var hardBtnActual = document.getElementById("hardBtnActual");

//LGM vars
var lgmButton = document.getElementById("lgmButton");

var lgmDeactivation = document.getElementById("lgmDeactivation");

var footer = document.getElementById("footer");

var easy = document.querySelector(".easy");

var normal = document.querySelectorAll(".normal");

var hard = document.querySelectorAll(".hard");

easyBtn.forEach(function(easyBtn) {
easyBtn.addEventListener("click", function () {
  easyBtnActual.classList.add("selected");
  normalBtnActual.classList.remove("selected");
  hardBtnActual.classList.remove("selected");
  numSquares = 3;
  lgmTotalReset();
  reset();
  //lgm mode-switch code
  easy.classList.add("showEasy");
  for (var i = 0; i < normal.length; i++) {
    normal[i].classList.remove("showNorm");
  }
  for (var i = 0; i < hard.length; i++) {
    hard[i].classList.remove("showHard");
  }
  for (var i = 0; i < squares.length; i++) {
    if (colors[i]) {
      squares[i].style.backgroundColor = colors[i];
      //when the easy button is pressed, there are only 3 colors generated, the if statment checks to see if there is a color present and then it changes it.
      squares[i].style.opacity = "1";
    } else {
      squares[i].style.display = "none";
    }
  }
});
});

normalBtn.forEach(function(normalBtn) {
normalBtn.addEventListener("click", function () {
  normalBtnActual.classList.add("selected");
  easyBtnActual.classList.remove("selected");
  hardBtnActual.classList.remove("selected");
  numSquares = 6;
  lgmTotalReset();
  reset();
  //lgm mode-switch code
  easy.classList.remove("showEasy");
  for (var i = 0; i < normal.length; i++) {
    normal[i].classList.add("showNorm");
  }
  for (var i = 0; i < hard.length; i++) {
    hard[i].classList.remove("showHard");
  }
  for (var i = 0; i < squares.length; i++) {
    if (colors[i]) {
      squares[i].style.backgroundColor = colors[i];
      squares[i].style.display = "block";
      squares[i].style.opacity = "1";
    } else {
      squares[i].style.display = "none";
    }
  }
});
});
  
hardBtn.forEach(function(hardBtn) {
hardBtn.addEventListener("click", function () {
 normalBtnActual.classList.remove("selected");
  easyBtnActual.classList.remove("selected");
  hardBtnActual.classList.add("selected");
  numSquares = 9;
  lgmTotalReset();
  reset();
  //lgm mode-switch code
  easy.classList.remove("showEasy");
  for (var i = 0; i < normal.length; i++) {
    normal[i].classList.remove("showNorm");
  }
  for (var i = 0; i < hard.length; i++) {
    hard[i].classList.add("showHard");
  }
  for (var i = 0; i < squares.length; i++) {
    squares[i].style.backgroundColor = colors[i];
    squares[i].style.display = "block";
    squares[i].style.opacity = "1";
  }
});
});

resetButton.addEventListener("click", function () {
  reset();
  lgmTotalReset();
  //assigns the new colors to the squares.
  for (var i = 0; i < squares.length; i++) {
    squares[i].style.backgroundColor = colors[i];
    //makes the squares visible again.
    squares[i].style.opacity = "1";
  }
});

//lgm activation
lgmButton.addEventListener("click", function () {
  lgmDeactivation.style.visibility = "visible";
  lgmDeactivation.style.opacity = "1";
  lgmButton.classList.add("LGMselected");
  footer.classList.add("show");
  lgmTotalReset();
  reset();
  for (var i = 0; i < squares.length; i++) {
    squares[i].style.backgroundColor = colors[i];
    squares[i].style.opacity = "1";
  }
  if (numSquares == 6) {
    footer.classList.add("show");
    for (var i = 0; i < normal.length; i++) {
      normal[i].classList.add("showNorm");
    }
  } else if (numSquares == 3) {
    footer.classList.add("show");
    easy.classList.add("showEasy");
  } else if (numSquares == 9) {
    for (var i = 0; i < hard.length; i++) {
      footer.classList.add("show");
      hard[i].classList.add("showHard");
    }
  }
});

lgmDeactivation.addEventListener("click", function () {
  lgmDeactivation.style.visibility = "hidden";
  lgmTotalReset();
  lgmDeactivation.style.opacity = "0";
  lgmButton.classList.remove("LGMselected");
  footer.classList.remove("show");
  easy.classList.remove("showEasy");
  for (var i = 0; i < normal.length; i++) {
    normal[i].classList.remove("showNorm");
  }
  for (var i = 0; i < hard.length; i++) {
    hard[i].classList.remove("showHard");
  }
});

close[1].addEventListener("click", function () {
  overlay[1].style.display = "none";
  lgmTotalReset();
  reset();
  for (var i = 0; i < squares.length; i++) {
    squares[i].style.backgroundColor = colors[i];
    squares[i].style.opacity = "1";
  }
});

colorDisplay.textContent = pickedColor; //The colors in the array are generated as strings which is why they can be printed onto the page this way.

// The below for loop allocates a color to each square div from the colors array, the order the divs appear on the page is the order they will take their colors from the array:
for (var i = 0; i < squares.length; i++) {
  //this one adds colors to the squares
  squares[i].style.backgroundColor = colors[i];
  //this one adds the clickListener to the squares
  squares[i].addEventListener("click", function () {
    /// this line grabs the color of the  square that has been clicked on & assigns it to a var
    var clickedColor = this.style.backgroundColor;
    if (
      resetButton.textContent != "Play Again?" &&
      this.style.opacity !== "0"
    ) {
      guesses++;
    }
    //Compare the color in this var to the color in the targetColor var.
    if (clickedColor === pickedColor) {
      if (guesses === 1) {
        plural = " guess!";
      } else {
        plural = " guesses!";
      }
      messageDisplay.textContent = "Correct  in " + guesses + plural;
      resetButton.textContent = "Play Again?";
      changeColors(clickedColor);
      //this is the function defined down below, clickedColor is being used as the argument, all of this activates only if user presses correct square.
      h1.style.backgroundColor = clickedColor;
      for (var i = 0; i < squares.length; i++) {
        squares[i].style.opacity = "1";
      }
    } else {
      if (this.style.opacity !== "0") {
        messageDisplay.textContent = "Wrong!";
        lgmLives++;
        this.style.opacity = "0";
      }
      //lgm life lost  code
      if (lgmButton.classList.contains("LGMselected")) {
        if (numSquares === 3) {
          if (lgmLives == 1) {
            easy.classList.add("lifelost");
          } else if (lgmLives == 2) {
            failState();
          }
        } else if (numSquares === 6) {
          if (lgmLives == 1) {
            normal[0].classList.add("lifelost");
          } else if (lgmLives == 2) {
            normal[1].classList.add("lifelost");
          } else if (lgmLives == 3) {
            failState();
          }
        } else if (numSquares === 9) {
          if (lgmLives == 1) {
            hard[0].classList.add("lifelost");
          } else if (lgmLives == 2) {
            hard[1].classList.add("lifelost");
          } else if (lgmLives == 3) {
            hard[2].classList.add("lifelost");
          } else if (lgmLives == 4) {
            failState();
          }
        }
      }
    }
  });
}

function changeColors(color) {
  //This function changes all squares to match the correct color if user picks correctly, up above, the clicked color is inputted as the argument.
  //loop through all squares
  for (var i = 0; i < squares.length; i++) {
    //change each color to match given color
    squares[i].style.backgroundColor = color;
    //color is the argument in the brackets up above
  }
}

function pickColor() {
  var random = Math.floor(Math.random() * colors.length); //colors.length is acting as the highest number here, this function will only pick a number between 0 and however long  the array of colors currently is to pick one of the generated colors.
  return colors[random]; //random acts as a number generated by the above formula.
}

function generateRandomColors(num) {
  //make an array
  var arr = [];
  //add num random colors to arr
  for (var i = 0; i < num; i++) {
    //get random color generated by the funciton below and push into arr
    arr.push(randomColor());
  }
  //return that array
  return arr;
}

function randomColor() {
  //pick a "red" from 0 - 255
  var r = Math.floor(Math.random() * 256);
  //pick a "green" from 0 - 255
  var g = Math.floor(Math.random() * 256);
  //pick a "blue" from 0 - 255
  var b = Math.floor(Math.random() * 256);
  //The returned output of this function is used as the argument in the section above, pushed into an array that is used as a value.
  return "rgb(" + r + ", " + g + ", " + b + ")";
}

function lgmTotalReset() {
  lgmLives = 0;
  easy.classList.remove("lifelost");
  for (var i = 0; i < normal.length; i++) {
    normal[i].classList.remove("lifelost");
  }
  for (var i = 0; i < hard.length; i++) {
    hard[i].classList.remove("lifelost");
  }
}

function failState() {
  overlay[1].style.display = "block";
}

function reset() {
  //generate all new colors
  colors = generateRandomColors(numSquares);
  //pick a new random color from array
  pickedColor = pickColor();
  //change colorDisplay text to match new picked color
  messageDisplay.textContent = "";
  resetButton.textContent = "Reset";
  colorDisplay.textContent = pickedColor;
  guesses = 0;
  //removes h1 background again.
  h1.style.backgroundColor = "transparent";
  if(numSquares === 6){
for(var i = 0; i < middleThree.length; i++) {
   middleThree[i].style.marginBottom= "25%";
  }
} else if (numSquares === 3 || numSquares === 9){
for(var i = 0; i < middleThree.length; i++) {
   middleThree[i].style.marginBottom= "1.66%";
  }
}
}


